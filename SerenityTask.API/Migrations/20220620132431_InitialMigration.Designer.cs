// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SerenityTask.API.Models.Entities;

#nullable disable

namespace SerenityTask.API.Migrations
{
    [DbContext(typeof(SerenityTaskDbContext))]
    [Migration("20220620132431_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Achievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserDetailsId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.AchievementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Goal")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AchievementTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Grow your first plant without loosing level",
                            Goal = 1,
                            Icon = "https://storage.serenitytask.com/system/media/pictures/achievements/gardener/tier_1.png",
                            Name = "Gardener",
                            Rate = 1
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Grow your third plant without loosing level",
                            Goal = 3,
                            Icon = "https://storage.serenitytask.com/system/media/pictures/achievements/gardener/tier_2.png",
                            Name = "Gardener",
                            Rate = 2
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Grow your fifth plant without lossing level",
                            Goal = 5,
                            Icon = "https://storage.serenitytask.com/system/media/pictures/achievements/gardener/tier_3.png",
                            Name = "Gardener",
                            Rate = 3
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Complete 10 tasks before deadline",
                            Goal = 10,
                            Icon = "https://storage.serenitytask.com/system/media/pictures/achievements/serenity_soul/tier_1.png",
                            Name = "Serenity Soul",
                            Rate = 1
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Complete 25 tasks before deadline",
                            Goal = 25,
                            Icon = "https://storage.serenitytask.com/system/media/pictures/achievements/serenity_soul/tier_2.png",
                            Name = "Serenity Soul",
                            Rate = 2
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Complete 50 tasks before deadline",
                            Goal = 50,
                            Icon = "https://storage.serenitytask.com/system/media/pictures/achievements/serenity_soul/tier_3.png",
                            Name = "Serenity Soul",
                            Rate = 3
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Start growing your first plant",
                            Goal = 1,
                            Icon = "https://storage.serenitytask.com/system/media/pictures/achievements/ordinary/first_step.png",
                            Name = "First Step",
                            Rate = 0
                        });
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.ConfirmationToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmationTokens");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.GoogleCalendarAccessRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsAccessGranted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("GoogleCalendarAccessRequests");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.GoogleCredential", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CalendarId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExpiresAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExpiresIn")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("IssuedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("GoogleCredentials");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.HubConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HubConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OSVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HubConnections");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Plant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("CurrentExperience")
                        .HasColumnType("float");

                    b.Property<bool>("IsDead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGrowthFinished")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxExperience")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PlantTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalDeadLeaves")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlantTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.PlantHistoryNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ActionDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceObjectType")
                        .HasColumnType("int");

                    b.Property<long>("PlantId")
                        .HasColumnType("bigint");

                    b.Property<double>("ReceivedExperience")
                        .HasColumnType("float");

                    b.Property<string>("SessionDetailsJSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDetailsJSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("TaskId");

                    b.ToTable("PlantHistory");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.PlantType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("MaxLeaves")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlantTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MaxLeaves = 5,
                            Name = "Sorana"
                        },
                        new
                        {
                            Id = 2L,
                            MaxLeaves = 17,
                            Name = "Selnera"
                        });
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Quote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quotes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorName = "Harriet Beecher Stowe",
                            Context = "“Never give up, for that is just the place and time that the tide will turn.”"
                        },
                        new
                        {
                            Id = 2L,
                            AuthorName = "Elbert Hubbard",
                            Context = "“There is no failure except in no longer trying.”"
                        },
                        new
                        {
                            Id = 3L,
                            AuthorName = "James A. Michener",
                            Context = "“Character consists of what you do on the third and fourth tries.”"
                        },
                        new
                        {
                            Id = 4L,
                            AuthorName = "Chuck Yeager",
                            Context = "“You do what you can for as long as you can, and when you finally can’t, you do the next best thing. You back up but you don’t give up.”"
                        },
                        new
                        {
                            Id = 5L,
                            AuthorName = "Roy T. Bennett",
                            Context = "“Do not fear failure but rather fear not trying.”"
                        });
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoogleCalendarEventId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHardModeActived")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionMembersJSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.SessionRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SendingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("SessionRequests");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.SettingsNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SettingsNotifications");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.SystemNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("SystemNotifications");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentTaskId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("TrackedTime")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.TaskHistoryNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskHistory");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.TimeZoneType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneIdIANA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeZoneTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DisplayName = "(UTC-12:00) International Date Line West",
                            TimeZoneId = "Dateline Standard Time",
                            TimeZoneIdIANA = "Etc/GMT+12"
                        },
                        new
                        {
                            Id = 2L,
                            DisplayName = "(UTC-11:00) Coordinated Universal Time-11",
                            TimeZoneId = "UTC-11",
                            TimeZoneIdIANA = "Etc/GMT+11"
                        },
                        new
                        {
                            Id = 3L,
                            DisplayName = "(UTC-10:00) Aleutian Islands",
                            TimeZoneId = "Aleutian Standard Time",
                            TimeZoneIdIANA = "America/Adak"
                        },
                        new
                        {
                            Id = 4L,
                            DisplayName = "(UTC-10:00) Hawaii",
                            TimeZoneId = "Hawaiian Standard Time",
                            TimeZoneIdIANA = "Pacific/Honolulu"
                        },
                        new
                        {
                            Id = 5L,
                            DisplayName = "(UTC-09:30) Marquesas Islands",
                            TimeZoneId = "Marquesas Standard Time",
                            TimeZoneIdIANA = "Pacific/Marquesas"
                        },
                        new
                        {
                            Id = 6L,
                            DisplayName = "(UTC-09:00) Alaska",
                            TimeZoneId = "Alaskan Standard Time",
                            TimeZoneIdIANA = "America/Anchorage"
                        },
                        new
                        {
                            Id = 7L,
                            DisplayName = "(UTC-09:00) Coordinated Universal Time-09",
                            TimeZoneId = "UTC-09",
                            TimeZoneIdIANA = "Etc/GMT+9"
                        },
                        new
                        {
                            Id = 8L,
                            DisplayName = "(UTC-08:00) Baja California",
                            TimeZoneId = "Pacific Standard Time (Mexico)",
                            TimeZoneIdIANA = "America/Tijuana"
                        },
                        new
                        {
                            Id = 9L,
                            DisplayName = "(UTC-08:00) Coordinated Universal Time-08",
                            TimeZoneId = "UTC-08",
                            TimeZoneIdIANA = "Etc/GMT+8"
                        },
                        new
                        {
                            Id = 10L,
                            DisplayName = "(UTC-08:00) Pacific Time (US & Canada)",
                            TimeZoneId = "Pacific Standard Time",
                            TimeZoneIdIANA = "America/Los_Angeles"
                        },
                        new
                        {
                            Id = 11L,
                            DisplayName = "(UTC-07:00) Arizona",
                            TimeZoneId = "US Mountain Standard Time",
                            TimeZoneIdIANA = "America/Phoenix"
                        },
                        new
                        {
                            Id = 12L,
                            DisplayName = "(UTC-07:00) Chihuahua, La Paz, Mazatlan",
                            TimeZoneId = "Mountain Standard Time (Mexico)",
                            TimeZoneIdIANA = "America/Chihuahua"
                        },
                        new
                        {
                            Id = 13L,
                            DisplayName = "(UTC-07:00) Mountain Time (US & Canada)",
                            TimeZoneId = "Mountain Standard Time",
                            TimeZoneIdIANA = "America/Denver"
                        },
                        new
                        {
                            Id = 14L,
                            DisplayName = "(UTC-07:00) Yukon",
                            TimeZoneId = "Yukon Standard Time",
                            TimeZoneIdIANA = "America/Whitehorse"
                        },
                        new
                        {
                            Id = 15L,
                            DisplayName = "(UTC-06:00) Central America",
                            TimeZoneId = "Central America Standard Time",
                            TimeZoneIdIANA = "America/Guatemala"
                        },
                        new
                        {
                            Id = 16L,
                            DisplayName = "(UTC-06:00) Central Time (US & Canada)",
                            TimeZoneId = "Central Standard Time",
                            TimeZoneIdIANA = "America/Chicago"
                        },
                        new
                        {
                            Id = 17L,
                            DisplayName = "(UTC-06:00) Easter Island",
                            TimeZoneId = "Easter Island Standard Time",
                            TimeZoneIdIANA = "Pacific/Easter"
                        },
                        new
                        {
                            Id = 18L,
                            DisplayName = "(UTC-06:00) Guadalajara, Mexico City, Monterrey",
                            TimeZoneId = "Central Standard Time (Mexico)",
                            TimeZoneIdIANA = "America/Mexico_City"
                        },
                        new
                        {
                            Id = 19L,
                            DisplayName = "(UTC-06:00) Saskatchewan",
                            TimeZoneId = "Canada Central Standard Time",
                            TimeZoneIdIANA = "America/Regina"
                        },
                        new
                        {
                            Id = 20L,
                            DisplayName = "(UTC-05:00) Bogota, Lima, Quito, Rio Branco",
                            TimeZoneId = "SA Pacific Standard Time",
                            TimeZoneIdIANA = "America/Bogota"
                        },
                        new
                        {
                            Id = 21L,
                            DisplayName = "(UTC-05:00) Chetumal",
                            TimeZoneId = "Eastern Standard Time (Mexico)",
                            TimeZoneIdIANA = "America/Cancun"
                        },
                        new
                        {
                            Id = 22L,
                            DisplayName = "(UTC-05:00) Eastern Time (US & Canada)",
                            TimeZoneId = "Eastern Standard Time",
                            TimeZoneIdIANA = "America/New_York"
                        },
                        new
                        {
                            Id = 23L,
                            DisplayName = "(UTC-05:00) Haiti",
                            TimeZoneId = "Haiti Standard Time",
                            TimeZoneIdIANA = "America/Port-au-Prince"
                        },
                        new
                        {
                            Id = 24L,
                            DisplayName = "(UTC-05:00) Havana",
                            TimeZoneId = "Cuba Standard Time",
                            TimeZoneIdIANA = "America/Havana"
                        },
                        new
                        {
                            Id = 25L,
                            DisplayName = "(UTC-05:00) Indiana (East)",
                            TimeZoneId = "US Eastern Standard Time",
                            TimeZoneIdIANA = "America/Indiana/Indianapolis"
                        },
                        new
                        {
                            Id = 26L,
                            DisplayName = "(UTC-05:00) Turks and Caicos",
                            TimeZoneId = "Turks And Caicos Standard Time",
                            TimeZoneIdIANA = "America/Grand_Turk"
                        },
                        new
                        {
                            Id = 27L,
                            DisplayName = "(UTC-04:00) Asuncion",
                            TimeZoneId = "Paraguay Standard Time",
                            TimeZoneIdIANA = "America/Asuncion"
                        },
                        new
                        {
                            Id = 28L,
                            DisplayName = "(UTC-04:00) Atlantic Time (Canada)",
                            TimeZoneId = "Atlantic Standard Time",
                            TimeZoneIdIANA = "America/Halifax"
                        },
                        new
                        {
                            Id = 29L,
                            DisplayName = "(UTC-04:00) Caracas",
                            TimeZoneId = "Venezuela Standard Time",
                            TimeZoneIdIANA = "America/Caracas"
                        },
                        new
                        {
                            Id = 30L,
                            DisplayName = "(UTC-04:00) Cuiaba",
                            TimeZoneId = "Central Brazilian Standard Time",
                            TimeZoneIdIANA = "America/Cuiaba"
                        },
                        new
                        {
                            Id = 31L,
                            DisplayName = "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
                            TimeZoneId = "SA Western Standard Time",
                            TimeZoneIdIANA = "America/La_Paz"
                        },
                        new
                        {
                            Id = 32L,
                            DisplayName = "(UTC-04:00) Santiago",
                            TimeZoneId = "Pacific SA Standard Time",
                            TimeZoneIdIANA = "America/Santiago"
                        },
                        new
                        {
                            Id = 33L,
                            DisplayName = "(UTC-03:30) Newfoundland",
                            TimeZoneId = "Newfoundland Standard Time",
                            TimeZoneIdIANA = "America/St_Johns"
                        },
                        new
                        {
                            Id = 34L,
                            DisplayName = "(UTC-03:00) Araguaina",
                            TimeZoneId = "Tocantins Standard Time",
                            TimeZoneIdIANA = "America/Araguaina"
                        },
                        new
                        {
                            Id = 35L,
                            DisplayName = "(UTC-03:00) Brasilia",
                            TimeZoneId = "E. South America Standard Time",
                            TimeZoneIdIANA = "America/Sao_Paulo"
                        },
                        new
                        {
                            Id = 36L,
                            DisplayName = "(UTC-03:00) Cayenne, Fortaleza",
                            TimeZoneId = "SA Eastern Standard Time",
                            TimeZoneIdIANA = "America/Cayenne"
                        },
                        new
                        {
                            Id = 37L,
                            DisplayName = "(UTC-03:00) City of Buenos Aires",
                            TimeZoneId = "Argentina Standard Time",
                            TimeZoneIdIANA = "America/Argentina/Buenos_Aires"
                        },
                        new
                        {
                            Id = 38L,
                            DisplayName = "(UTC-03:00) Greenland",
                            TimeZoneId = "Greenland Standard Time",
                            TimeZoneIdIANA = "America/Nuuk"
                        },
                        new
                        {
                            Id = 39L,
                            DisplayName = "(UTC-03:00) Montevideo",
                            TimeZoneId = "Montevideo Standard Time",
                            TimeZoneIdIANA = "America/Montevideo"
                        },
                        new
                        {
                            Id = 40L,
                            DisplayName = "(UTC-03:00) Punta Arenas",
                            TimeZoneId = "Magallanes Standard Time",
                            TimeZoneIdIANA = "America/Punta_Arenas"
                        },
                        new
                        {
                            Id = 41L,
                            DisplayName = "(UTC-03:00) Saint Pierre and Miquelon",
                            TimeZoneId = "Saint Pierre Standard Time",
                            TimeZoneIdIANA = "America/Miquelon"
                        },
                        new
                        {
                            Id = 42L,
                            DisplayName = "(UTC-03:00) Salvador",
                            TimeZoneId = "Bahia Standard Time",
                            TimeZoneIdIANA = "America/Bahia"
                        },
                        new
                        {
                            Id = 43L,
                            DisplayName = "(UTC-02:00) Coordinated Universal Time-02",
                            TimeZoneId = "UTC-02",
                            TimeZoneIdIANA = "Etc/GMT+2"
                        },
                        new
                        {
                            Id = 44L,
                            DisplayName = "(UTC-02:00) Mid-Atlantic - Old",
                            TimeZoneId = "Mid-Atlantic Standard Time",
                            TimeZoneIdIANA = "Etc/GMT+2"
                        },
                        new
                        {
                            Id = 45L,
                            DisplayName = "(UTC-01:00) Azores",
                            TimeZoneId = "Azores Standard Time",
                            TimeZoneIdIANA = "Atlantic/Azores"
                        },
                        new
                        {
                            Id = 46L,
                            DisplayName = "(UTC-01:00) Cabo Verde Is.",
                            TimeZoneId = "Cape Verde Standard Time",
                            TimeZoneIdIANA = "Atlantic/Cape_Verde"
                        },
                        new
                        {
                            Id = 47L,
                            DisplayName = "(UTC) Coordinated Universal Time",
                            TimeZoneId = "UTC",
                            TimeZoneIdIANA = "Etc/UTC"
                        },
                        new
                        {
                            Id = 48L,
                            DisplayName = "(UTC+00:00) Dublin, Edinburgh, Lisbon, London",
                            TimeZoneId = "GMT Standard Time",
                            TimeZoneIdIANA = "Europe/London"
                        },
                        new
                        {
                            Id = 49L,
                            DisplayName = "(UTC+00:00) Monrovia, Reykjavik",
                            TimeZoneId = "Greenwich Standard Time",
                            TimeZoneIdIANA = "Atlantic/Reykjavik"
                        },
                        new
                        {
                            Id = 50L,
                            DisplayName = "(UTC+00:00) Sao Tome",
                            TimeZoneId = "Sao Tome Standard Time",
                            TimeZoneIdIANA = "Africa/Sao_Tome"
                        },
                        new
                        {
                            Id = 51L,
                            DisplayName = "(UTC+01:00) Casablanca",
                            TimeZoneId = "Morocco Standard Time",
                            TimeZoneIdIANA = "Africa/Casablanca"
                        },
                        new
                        {
                            Id = 52L,
                            DisplayName = "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
                            TimeZoneId = "W. Europe Standard Time",
                            TimeZoneIdIANA = "Europe/Berlin"
                        },
                        new
                        {
                            Id = 53L,
                            DisplayName = "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
                            TimeZoneId = "Central Europe Standard Time",
                            TimeZoneIdIANA = "Europe/Budapest"
                        },
                        new
                        {
                            Id = 54L,
                            DisplayName = "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris",
                            TimeZoneId = "Romance Standard Time",
                            TimeZoneIdIANA = "Europe/Paris"
                        },
                        new
                        {
                            Id = 55L,
                            DisplayName = "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
                            TimeZoneId = "Central European Standard Time",
                            TimeZoneIdIANA = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 56L,
                            DisplayName = "(UTC+01:00) West Central Africa",
                            TimeZoneId = "W. Central Africa Standard Time",
                            TimeZoneIdIANA = "Africa/Lagos"
                        },
                        new
                        {
                            Id = 57L,
                            DisplayName = "(UTC+02:00) Amman",
                            TimeZoneId = "Jordan Standard Time",
                            TimeZoneIdIANA = "Asia/Amman"
                        },
                        new
                        {
                            Id = 58L,
                            DisplayName = "(UTC+02:00) Athens, Bucharest",
                            TimeZoneId = "GTB Standard Time",
                            TimeZoneIdIANA = "Europe/Bucharest"
                        },
                        new
                        {
                            Id = 59L,
                            DisplayName = "(UTC+02:00) Beirut",
                            TimeZoneId = "Middle East Standard Time",
                            TimeZoneIdIANA = "Asia/Beirut"
                        },
                        new
                        {
                            Id = 60L,
                            DisplayName = "(UTC+02:00) Cairo",
                            TimeZoneId = "Egypt Standard Time",
                            TimeZoneIdIANA = "Africa/Cairo"
                        },
                        new
                        {
                            Id = 61L,
                            DisplayName = "(UTC+02:00) Chisinau",
                            TimeZoneId = "E. Europe Standard Time",
                            TimeZoneIdIANA = "Europe/Chisinau"
                        },
                        new
                        {
                            Id = 62L,
                            DisplayName = "(UTC+02:00) Damascus",
                            TimeZoneId = "Syria Standard Time",
                            TimeZoneIdIANA = "Asia/Damascus"
                        },
                        new
                        {
                            Id = 63L,
                            DisplayName = "(UTC+02:00) Gaza, Hebron",
                            TimeZoneId = "West Bank Standard Time",
                            TimeZoneIdIANA = "Asia/Hebron"
                        },
                        new
                        {
                            Id = 64L,
                            DisplayName = "(UTC+02:00) Harare, Pretoria",
                            TimeZoneId = "South Africa Standard Time",
                            TimeZoneIdIANA = "Africa/Johannesburg"
                        },
                        new
                        {
                            Id = 65L,
                            DisplayName = "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
                            TimeZoneId = "FLE Standard Time",
                            TimeZoneIdIANA = "Europe/Kiev"
                        },
                        new
                        {
                            Id = 66L,
                            DisplayName = "(UTC+02:00) Jerusalem",
                            TimeZoneId = "Israel Standard Time",
                            TimeZoneIdIANA = "Asia/Jerusalem"
                        },
                        new
                        {
                            Id = 67L,
                            DisplayName = "(UTC+02:00) Juba",
                            TimeZoneId = "South Sudan Standard Time",
                            TimeZoneIdIANA = "Africa/Juba"
                        },
                        new
                        {
                            Id = 68L,
                            DisplayName = "(UTC+02:00) Kaliningrad",
                            TimeZoneId = "Kaliningrad Standard Time",
                            TimeZoneIdIANA = "Europe/Kaliningrad"
                        },
                        new
                        {
                            Id = 69L,
                            DisplayName = "(UTC+02:00) Khartoum",
                            TimeZoneId = "Sudan Standard Time",
                            TimeZoneIdIANA = "Africa/Khartoum"
                        },
                        new
                        {
                            Id = 70L,
                            DisplayName = "(UTC+02:00) Tripoli",
                            TimeZoneId = "Libya Standard Time",
                            TimeZoneIdIANA = "Africa/Tripoli"
                        },
                        new
                        {
                            Id = 71L,
                            DisplayName = "(UTC+02:00) Windhoek",
                            TimeZoneId = "Namibia Standard Time",
                            TimeZoneIdIANA = "Africa/Windhoek"
                        },
                        new
                        {
                            Id = 72L,
                            DisplayName = "(UTC+03:00) Baghdad",
                            TimeZoneId = "Arabic Standard Time",
                            TimeZoneIdIANA = "Asia/Baghdad"
                        },
                        new
                        {
                            Id = 73L,
                            DisplayName = "(UTC+03:00) Istanbul",
                            TimeZoneId = "Turkey Standard Time",
                            TimeZoneIdIANA = "Europe/Istanbul"
                        },
                        new
                        {
                            Id = 74L,
                            DisplayName = "(UTC+03:00) Kuwait, Riyadh",
                            TimeZoneId = "Arab Standard Time",
                            TimeZoneIdIANA = "Asia/Riyadh"
                        },
                        new
                        {
                            Id = 75L,
                            DisplayName = "(UTC+03:00) Minsk",
                            TimeZoneId = "Belarus Standard Time",
                            TimeZoneIdIANA = "Europe/Minsk"
                        },
                        new
                        {
                            Id = 76L,
                            DisplayName = "(UTC+03:00) Moscow, St. Petersburg",
                            TimeZoneId = "Russian Standard Time",
                            TimeZoneIdIANA = "Europe/Moscow"
                        },
                        new
                        {
                            Id = 77L,
                            DisplayName = "(UTC+03:00) Nairobi",
                            TimeZoneId = "E. Africa Standard Time",
                            TimeZoneIdIANA = "Africa/Nairobi"
                        },
                        new
                        {
                            Id = 78L,
                            DisplayName = "(UTC+03:00) Volgograd",
                            TimeZoneId = "Volgograd Standard Time",
                            TimeZoneIdIANA = "Europe/Volgograd"
                        },
                        new
                        {
                            Id = 79L,
                            DisplayName = "(UTC+03:30) Tehran",
                            TimeZoneId = "Iran Standard Time",
                            TimeZoneIdIANA = "Asia/Tehran"
                        },
                        new
                        {
                            Id = 80L,
                            DisplayName = "(UTC+04:00) Abu Dhabi, Muscat",
                            TimeZoneId = "Arabian Standard Time",
                            TimeZoneIdIANA = "Asia/Dubai"
                        },
                        new
                        {
                            Id = 81L,
                            DisplayName = "(UTC+04:00) Astrakhan, Ulyanovsk",
                            TimeZoneId = "Astrakhan Standard Time",
                            TimeZoneIdIANA = "Europe/Astrakhan"
                        },
                        new
                        {
                            Id = 82L,
                            DisplayName = "(UTC+04:00) Baku",
                            TimeZoneId = "Azerbaijan Standard Time",
                            TimeZoneIdIANA = "Asia/Baku"
                        },
                        new
                        {
                            Id = 83L,
                            DisplayName = "(UTC+04:00) Izhevsk, Samara",
                            TimeZoneId = "Russia Time Zone 3",
                            TimeZoneIdIANA = "Europe/Samara"
                        },
                        new
                        {
                            Id = 84L,
                            DisplayName = "(UTC+04:00) Port Louis",
                            TimeZoneId = "Mauritius Standard Time",
                            TimeZoneIdIANA = "Indian/Mauritius"
                        },
                        new
                        {
                            Id = 85L,
                            DisplayName = "(UTC+04:00) Saratov",
                            TimeZoneId = "Saratov Standard Time",
                            TimeZoneIdIANA = "Europe/Saratov"
                        },
                        new
                        {
                            Id = 86L,
                            DisplayName = "(UTC+04:00) Tbilisi",
                            TimeZoneId = "Georgian Standard Time",
                            TimeZoneIdIANA = "Asia/Tbilisi"
                        },
                        new
                        {
                            Id = 87L,
                            DisplayName = "(UTC+04:00) Yerevan",
                            TimeZoneId = "Caucasus Standard Time",
                            TimeZoneIdIANA = "Asia/Yerevan"
                        },
                        new
                        {
                            Id = 88L,
                            DisplayName = "(UTC+04:30) Kabul",
                            TimeZoneId = "Afghanistan Standard Time",
                            TimeZoneIdIANA = "Asia/Kabul"
                        },
                        new
                        {
                            Id = 89L,
                            DisplayName = "(UTC+05:00) Ashgabat, Tashkent",
                            TimeZoneId = "West Asia Standard Time",
                            TimeZoneIdIANA = "Asia/Tashkent"
                        },
                        new
                        {
                            Id = 90L,
                            DisplayName = "(UTC+05:00) Ekaterinburg",
                            TimeZoneId = "Ekaterinburg Standard Time",
                            TimeZoneIdIANA = "Asia/Yekaterinburg"
                        },
                        new
                        {
                            Id = 91L,
                            DisplayName = "(UTC+05:00) Islamabad, Karachi",
                            TimeZoneId = "Pakistan Standard Time",
                            TimeZoneIdIANA = "Asia/Karachi"
                        },
                        new
                        {
                            Id = 92L,
                            DisplayName = "(UTC+05:00) Qyzylorda",
                            TimeZoneId = "Qyzylorda Standard Time",
                            TimeZoneIdIANA = "Asia/Qyzylorda"
                        },
                        new
                        {
                            Id = 93L,
                            DisplayName = "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi",
                            TimeZoneId = "India Standard Time",
                            TimeZoneIdIANA = "Asia/Kolkata"
                        },
                        new
                        {
                            Id = 94L,
                            DisplayName = "(UTC+05:30) Sri Jayawardenepura",
                            TimeZoneId = "Sri Lanka Standard Time",
                            TimeZoneIdIANA = "Asia/Colombo"
                        },
                        new
                        {
                            Id = 95L,
                            DisplayName = "(UTC+05:45) Kathmandu",
                            TimeZoneId = "Nepal Standard Time",
                            TimeZoneIdIANA = "Asia/Kathmandu"
                        },
                        new
                        {
                            Id = 96L,
                            DisplayName = "(UTC+06:00) Astana",
                            TimeZoneId = "Central Asia Standard Time",
                            TimeZoneIdIANA = "Asia/Almaty"
                        },
                        new
                        {
                            Id = 97L,
                            DisplayName = "(UTC+06:00) Dhaka",
                            TimeZoneId = "Bangladesh Standard Time",
                            TimeZoneIdIANA = "Asia/Dhaka"
                        },
                        new
                        {
                            Id = 98L,
                            DisplayName = "(UTC+06:00) Omsk",
                            TimeZoneId = "Omsk Standard Time",
                            TimeZoneIdIANA = "Asia/Omsk"
                        },
                        new
                        {
                            Id = 99L,
                            DisplayName = "(UTC+06:30) Yangon (Rangoon)",
                            TimeZoneId = "Myanmar Standard Time",
                            TimeZoneIdIANA = "Asia/Yangon"
                        },
                        new
                        {
                            Id = 100L,
                            DisplayName = "(UTC+07:00) Bangkok, Hanoi, Jakarta",
                            TimeZoneId = "SE Asia Standard Time",
                            TimeZoneIdIANA = "Asia/Bangkok"
                        },
                        new
                        {
                            Id = 101L,
                            DisplayName = "(UTC+07:00) Barnaul, Gorno-Altaysk",
                            TimeZoneId = "Altai Standard Time",
                            TimeZoneIdIANA = "Asia/Barnaul"
                        },
                        new
                        {
                            Id = 102L,
                            DisplayName = "(UTC+07:00) Hovd",
                            TimeZoneId = "W. Mongolia Standard Time",
                            TimeZoneIdIANA = "Asia/Hovd"
                        },
                        new
                        {
                            Id = 103L,
                            DisplayName = "(UTC+07:00) Krasnoyarsk",
                            TimeZoneId = "North Asia Standard Time",
                            TimeZoneIdIANA = "Asia/Krasnoyarsk"
                        },
                        new
                        {
                            Id = 104L,
                            DisplayName = "(UTC+07:00) Novosibirsk",
                            TimeZoneId = "N. Central Asia Standard Time",
                            TimeZoneIdIANA = "Asia/Novosibirsk"
                        },
                        new
                        {
                            Id = 105L,
                            DisplayName = "(UTC+07:00) Tomsk",
                            TimeZoneId = "Tomsk Standard Time",
                            TimeZoneIdIANA = "Asia/Tomsk"
                        },
                        new
                        {
                            Id = 106L,
                            DisplayName = "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
                            TimeZoneId = "China Standard Time",
                            TimeZoneIdIANA = "Asia/Shanghai"
                        },
                        new
                        {
                            Id = 107L,
                            DisplayName = "(UTC+08:00) Irkutsk",
                            TimeZoneId = "North Asia East Standard Time",
                            TimeZoneIdIANA = "Asia/Irkutsk"
                        },
                        new
                        {
                            Id = 108L,
                            DisplayName = "(UTC+08:00) Kuala Lumpur, Singapore",
                            TimeZoneId = "Singapore Standard Time",
                            TimeZoneIdIANA = "Asia/Singapore"
                        },
                        new
                        {
                            Id = 109L,
                            DisplayName = "(UTC+08:00) Perth",
                            TimeZoneId = "W. Australia Standard Time",
                            TimeZoneIdIANA = "Australia/Perth"
                        },
                        new
                        {
                            Id = 110L,
                            DisplayName = "(UTC+08:00) Taipei",
                            TimeZoneId = "Taipei Standard Time",
                            TimeZoneIdIANA = "Asia/Taipei"
                        },
                        new
                        {
                            Id = 111L,
                            DisplayName = "(UTC+08:00) Ulaanbaatar",
                            TimeZoneId = "Ulaanbaatar Standard Time",
                            TimeZoneIdIANA = "Asia/Ulaanbaatar"
                        },
                        new
                        {
                            Id = 112L,
                            DisplayName = "(UTC+08:45) Eucla",
                            TimeZoneId = "Aus Central W. Standard Time",
                            TimeZoneIdIANA = "Australia/Eucla"
                        },
                        new
                        {
                            Id = 113L,
                            DisplayName = "(UTC+09:00) Chita",
                            TimeZoneId = "Transbaikal Standard Time",
                            TimeZoneIdIANA = "Asia/Chita"
                        },
                        new
                        {
                            Id = 114L,
                            DisplayName = "(UTC+09:00) Osaka, Sapporo, Tokyo",
                            TimeZoneId = "Tokyo Standard Time",
                            TimeZoneIdIANA = "Asia/Tokyo"
                        },
                        new
                        {
                            Id = 115L,
                            DisplayName = "(UTC+09:00) Pyongyang",
                            TimeZoneId = "North Korea Standard Time",
                            TimeZoneIdIANA = "Asia/Pyongyang"
                        },
                        new
                        {
                            Id = 116L,
                            DisplayName = "(UTC+09:00) Seoul",
                            TimeZoneId = "Korea Standard Time",
                            TimeZoneIdIANA = "Asia/Seoul"
                        },
                        new
                        {
                            Id = 117L,
                            DisplayName = "(UTC+09:00) Yakutsk",
                            TimeZoneId = "Yakutsk Standard Time",
                            TimeZoneIdIANA = "Asia/Yakutsk"
                        },
                        new
                        {
                            Id = 118L,
                            DisplayName = "(UTC+09:30) Adelaide",
                            TimeZoneId = "Cen. Australia Standard Time",
                            TimeZoneIdIANA = "Australia/Adelaide"
                        },
                        new
                        {
                            Id = 119L,
                            DisplayName = "(UTC+09:30) Darwin",
                            TimeZoneId = "AUS Central Standard Time",
                            TimeZoneIdIANA = "Australia/Darwin"
                        },
                        new
                        {
                            Id = 120L,
                            DisplayName = "(UTC+10:00) Brisbane",
                            TimeZoneId = "E. Australia Standard Time",
                            TimeZoneIdIANA = "Australia/Brisbane"
                        },
                        new
                        {
                            Id = 121L,
                            DisplayName = "(UTC+10:00) Canberra, Melbourne, Sydney",
                            TimeZoneId = "AUS Eastern Standard Time",
                            TimeZoneIdIANA = "Australia/Sydney"
                        },
                        new
                        {
                            Id = 122L,
                            DisplayName = "(UTC+10:00) Guam, Port Moresby",
                            TimeZoneId = "West Pacific Standard Time",
                            TimeZoneIdIANA = "Pacific/Port_Moresby"
                        },
                        new
                        {
                            Id = 123L,
                            DisplayName = "(UTC+10:00) Hobart",
                            TimeZoneId = "Tasmania Standard Time",
                            TimeZoneIdIANA = "Australia/Hobart"
                        },
                        new
                        {
                            Id = 124L,
                            DisplayName = "(UTC+10:00) Vladivostok",
                            TimeZoneId = "Vladivostok Standard Time",
                            TimeZoneIdIANA = "Asia/Vladivostok"
                        },
                        new
                        {
                            Id = 125L,
                            DisplayName = "(UTC+10:30) Lord Howe Island",
                            TimeZoneId = "Lord Howe Standard Time",
                            TimeZoneIdIANA = "Australia/Lord_Howe"
                        },
                        new
                        {
                            Id = 126L,
                            DisplayName = "(UTC+11:00) Bougainville Island",
                            TimeZoneId = "Bougainville Standard Time",
                            TimeZoneIdIANA = "Pacific/Bougainville"
                        },
                        new
                        {
                            Id = 127L,
                            DisplayName = "(UTC+11:00) Chokurdakh",
                            TimeZoneId = "Russia Time Zone 10",
                            TimeZoneIdIANA = "Asia/Srednekolymsk"
                        },
                        new
                        {
                            Id = 128L,
                            DisplayName = "(UTC+11:00) Magadan",
                            TimeZoneId = "Magadan Standard Time",
                            TimeZoneIdIANA = "Asia/Magadan"
                        },
                        new
                        {
                            Id = 129L,
                            DisplayName = "(UTC+11:00) Norfolk Island",
                            TimeZoneId = "Norfolk Standard Time",
                            TimeZoneIdIANA = "Pacific/Norfolk"
                        },
                        new
                        {
                            Id = 130L,
                            DisplayName = "(UTC+11:00) Sakhalin",
                            TimeZoneId = "Sakhalin Standard Time",
                            TimeZoneIdIANA = "Asia/Sakhalin"
                        },
                        new
                        {
                            Id = 131L,
                            DisplayName = "(UTC+11:00) Solomon Is., New Caledonia",
                            TimeZoneId = "Central Pacific Standard Time",
                            TimeZoneIdIANA = "Pacific/Guadalcanal"
                        },
                        new
                        {
                            Id = 132L,
                            DisplayName = "(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky",
                            TimeZoneId = "Russia Time Zone 11",
                            TimeZoneIdIANA = "Asia/Kamchatka"
                        },
                        new
                        {
                            Id = 133L,
                            DisplayName = "(UTC+12:00) Auckland, Wellington",
                            TimeZoneId = "New Zealand Standard Time",
                            TimeZoneIdIANA = "Pacific/Auckland"
                        },
                        new
                        {
                            Id = 134L,
                            DisplayName = "(UTC+12:00) Coordinated Universal Time+12",
                            TimeZoneId = "UTC+12",
                            TimeZoneIdIANA = "Etc/GMT-12"
                        },
                        new
                        {
                            Id = 135L,
                            DisplayName = "(UTC+12:00) Fiji",
                            TimeZoneId = "Fiji Standard Time",
                            TimeZoneIdIANA = "Pacific/Fiji"
                        },
                        new
                        {
                            Id = 136L,
                            DisplayName = "(UTC+12:00) Petropavlovsk-Kamchatsky - Old",
                            TimeZoneId = "Kamchatka Standard Time",
                            TimeZoneIdIANA = "Asia/Kamchatka"
                        },
                        new
                        {
                            Id = 137L,
                            DisplayName = "(UTC+12:45) Chatham Islands",
                            TimeZoneId = "Chatham Islands Standard Time",
                            TimeZoneIdIANA = "Pacific/Chatham"
                        },
                        new
                        {
                            Id = 138L,
                            DisplayName = "(UTC+13:00) Coordinated Universal Time+13",
                            TimeZoneId = "UTC+13",
                            TimeZoneIdIANA = "Etc/GMT-13"
                        },
                        new
                        {
                            Id = 139L,
                            DisplayName = "(UTC+13:00) Nuku'alofa",
                            TimeZoneId = "Tonga Standard Time",
                            TimeZoneIdIANA = "Pacific/Tongatapu"
                        },
                        new
                        {
                            Id = 140L,
                            DisplayName = "(UTC+13:00) Samoa",
                            TimeZoneId = "Samoa Standard Time",
                            TimeZoneIdIANA = "Pacific/Apia"
                        },
                        new
                        {
                            Id = 141L,
                            DisplayName = "(UTC+14:00) Kiritimati Island",
                            TimeZoneId = "Line Islands Standard Time",
                            TimeZoneIdIANA = "Pacific/Kiritimati"
                        });
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGoogleCalendarConnected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserOnline")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6073e6de-ed9d-4fbd-b382-a41262ce2ae4"),
                            Email = "mikhail@csfullstack.com",
                            IsEmailConfirmed = true,
                            IsGoogleCalendarConnected = false,
                            IsUserOnline = false,
                            Name = "Mikhail",
                            PasswordHash = "4OcqV3nepadpciZId7IpzwgzBmsmttHcf3uiyAFRXuo=",
                            RoleId = 1,
                            Username = "mikhail@csfullstack.com"
                        });
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.UserConnector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConnectors");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.UserDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookingFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelegramUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TimeZoneId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TimeZoneId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Avatar = "assets/img/authorized/workspace/user.png",
                            UserId = new Guid("6073e6de-ed9d-4fbd-b382-a41262ce2ae4")
                        });
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.UserNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.UserSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("TimerSettings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            TimerSettings = "{ \"mode\": 0, \"type\": 0 }",
                            UserId = new Guid("6073e6de-ed9d-4fbd-b382-a41262ce2ae4")
                        });
                });

            modelBuilder.Entity("SerenityTask.API.Models.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SessionUser", b =>
                {
                    b.Property<Guid>("ParticipantsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SessionsId")
                        .HasColumnType("bigint");

                    b.HasKey("ParticipantsId", "SessionsId");

                    b.HasIndex("SessionsId");

                    b.ToTable("SessionUser");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Achievement", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.AchievementType", "Type")
                        .WithMany("Achievements")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SerenityTask.API.Models.Entities.UserDetails", "UserDetails")
                        .WithMany("Achievements")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.ConfirmationToken", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithMany("AccountConfirmationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.GoogleCalendarAccessRequest", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithOne("GoogleCalendarAccessRequest")
                        .HasForeignKey("SerenityTask.API.Models.Entities.GoogleCalendarAccessRequest", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.GoogleCredential", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithOne("GoogleCredential")
                        .HasForeignKey("SerenityTask.API.Models.Entities.GoogleCredential", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.HubConnection", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithMany("HubConnections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Plant", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.PlantType", "PlantType")
                        .WithMany("Plants")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithMany("Plants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlantType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.PlantHistoryNote", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.Plant", "Plant")
                        .WithMany("PlantHistory")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SerenityTask.API.Models.Entities.Task", "Task")
                        .WithMany("PlantHistory")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Plant");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Session", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "Owner")
                        .WithMany("OwnedSessions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.SessionRequest", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "Receiver")
                        .WithMany("ReceivedSessionRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SerenityTask.API.Models.Entities.User", "Sender")
                        .WithMany("SendedSessionRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.SettingsNotification", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithMany("SettingsNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.SystemNotification", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "Receiver")
                        .WithMany("SystemNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Task", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.Task", "ParentTask")
                        .WithMany("Subtasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.TaskHistoryNote", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.Task", "Task")
                        .WithMany("History")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.User", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.UserConnector", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithMany("UserConnectors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.UserDetails", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.TimeZoneType", "TimeZone")
                        .WithMany("UserDetails")
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("SerenityTask.API.Models.Entities.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TimeZone");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.UserNotification", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "Receiver")
                        .WithMany("UserNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SerenityTask.API.Models.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.UserSettings", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("SerenityTask.API.Models.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerenityTask.API.Models.File", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.Task", "Task")
                        .WithMany("Files")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SerenityTask.API.Models.Entities.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SessionUser", b =>
                {
                    b.HasOne("SerenityTask.API.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SerenityTask.API.Models.Entities.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.AchievementType", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Plant", b =>
                {
                    b.Navigation("PlantHistory");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.PlantType", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.Task", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("History");

                    b.Navigation("PlantHistory");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.TimeZoneType", b =>
                {
                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.User", b =>
                {
                    b.Navigation("AccountConfirmationTokens");

                    b.Navigation("Files");

                    b.Navigation("GoogleCalendarAccessRequest");

                    b.Navigation("GoogleCredential");

                    b.Navigation("HubConnections");

                    b.Navigation("OwnedSessions");

                    b.Navigation("Plants");

                    b.Navigation("ReceivedSessionRequests");

                    b.Navigation("SendedSessionRequests");

                    b.Navigation("SettingsNotifications");

                    b.Navigation("SystemNotifications");

                    b.Navigation("Tasks");

                    b.Navigation("UserConnectors");

                    b.Navigation("UserDetails");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("SerenityTask.API.Models.Entities.UserDetails", b =>
                {
                    b.Navigation("Achievements");
                });
#pragma warning restore 612, 618
        }
    }
}
